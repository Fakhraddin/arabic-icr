function [ Num ] = CreateWaveletFromFolder(ContoursFolder, WaveletTargetFolder, ContourResampleSize, FeatureType)
%CREATEFVFROMFOLDER Summary of this function goes here

C0 = 0;
tper = 0;
s = 0.5;      % Max nnz/numel in histogram (sparsity of histograms)


%Make sure the target folders exist or create them
res = exist(WaveletTargetFolder,'dir');
if (res==0)
    mkdir(WaveletTargetFolder);
end

if (FeatureType==1)
    TargetFolder=[WaveletTargetFolder,'\','Angular'];
end

if (FeatureType==2)
    TargetFolder=[WaveletTargetFolder,'\','ShapeContext'];
end

res = exist(TargetFolder,'dir');
if (res==0)
    mkdir(TargetFolder);
end

h = waitbar(0,('Generating Wavelet. Please Wait...'));

dirlist = dir(ContoursFolder);
Num=0;
DirListLength = length(dirlist);
for i = 1:DirListLength
    current_object = dirlist(i);
    IsFile=~[current_object.isdir];
    FileName = current_object.name;
    FileNameSize = size(FileName);
    LastCharacter = FileNameSize(2);
    if (IsFile==1 & FileName(LastCharacter)=='m')
        WPTContour = Dlmread([ContoursFolder,'\',FileName]);
        ResampledContour = ResampleContour(WPTContour,ContourResampleSize);
        WPFeatureVector = CreateFeatureVectorFromContour(ResampledContour,FeatureType);
        WPTWaveletSparse = wemdn(WPFeatureVector', [false false], s, C0, tper,  'coef1');
        WPTWavelet= full(WPTWaveletSparse(:,1));
        dlmwrite([TargetFolder,'\',FileName], WPTWavelet);
        Num=Num+1;
    end
    prog = i/DirListLength;
    waitbar(prog,h);
end

close (h);

